{"version":3,"sources":["components/Card/index.js","components/Header/index.js","components/Navbar/index.js","components/Footer/index.js","components/Container/index.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","id","src","image","alt","onClick","handleClick","Header","children","Navbar","Footer","Container","App","state","data","score","topScore","resetGame","console","log","_this","temp","map","eachItem","Object","objectSpread","isClicked","setState","shuffle","mydata","components_Card","key","handleItemClick","_","event","firstClick","target","upDateData","element","parseInt","newScore","newTopScore","Math","max","this","components_Navbar","components_Header","components_Container","components_Footer","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.74bd2d6b.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nfunction Card (props) {\n  // console.log(\"!!!!!!!!!!!!!!!!!!!!1\")\n  // console.log(props)\n  return (\n    <div className='card'>\n      <div className='img-container'>\n        {/* Make Image clickable for all pictures in card */}\n        <img id={props.id} src={props.image} alt={props.id} onClick={props.handleClick} />\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return <div className=\"header\">{props.children}</div>\n}\n\nexport default Header;\n","import React from 'react'\n// import { Link } from 'react-router-dom'\nimport './style.css'\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar (props) {\n  return (\n    <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n      <h1 className='title'>{props.children}</h1>\n    </nav>\n  )\n}\nexport default Navbar\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return (\n    <footer className=\"footer\">{props.children}</footer>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>\n}\n\nexport default Container;\n","import React from 'react';\r\nimport Card from './components/Card';\r\nimport Header from './components/Header';\r\nimport data from './friends.json';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Footer from './components/Footer';\r\nimport Container from './components/Container';\r\nimport _ from 'lodash';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\nstate = {\r\n    data, // this is json file with all the images that you are importing\r\n    score: 0, // current user score\r\n    topScore: 0 // top score\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log('======= called did mount ======= ');\r\n    \r\n    // console.log(this.state.data)\r\n    // Everytime the component mounts we want to update the state.data object\r\n    // so that state.data is this.state.data shuffled. So it should call your shuffle function\r\n    // this.shuffle(this.state.data);\r\n    this.resetGame(this.state.data)\r\n  }\r\n            // passing array, this.state.data\r\n  resetGame = (data) => {\r\n    console.log(\"reset game\")\r\n  // This function should do the following:\r\n  console.log(this.state.data)\r\n  console.log(data)\r\n  \r\n  // map through data and for each item in the array reset the clicked to false. Make sure to store the\r\n  // full results of the map to a temp variable.\r\n  let temp= this.state.data.map(eachItem => (\r\n    {...eachItem, isClicked: false}\r\n    ));\r\n\r\n  console.log('------------ Temp ---------------')\r\n\r\n    \r\n    console.log(temp);\r\n    \r\n    // reset the state.score to 0.\r\n    // update the state and set data equal to the temp variable shuffled.\r\n    this.setState({\r\n      data: temp,\r\n      score: 0\r\n    })\r\n\r\n  console.log('------------ after setState ---------------')\r\n\r\n  console.log(this.state.data)\r\n\r\n  \r\n  };\r\n\r\n  //\r\n  shuffle = (mydata) => {\r\n    console.log('$$$$$$$$$ shuffle ccalled $$$$$$$$$$$');\r\n    \r\n    let temp= mydata.map(eachItem => (\r\n      <Card \r\n      id={eachItem.id}\r\n      key={eachItem.id}\r\n      image={eachItem.image}\r\n                  // this Card to use this onClick function\r\n      handleClick={this.handleItemClick}\r\n      />\r\n      ));\r\n      // console.log(temp)\r\n    // https://github.com/lodash/lodash/blob/4ea8c2ec249be046a0f4ae32539d652194caf74f/shuffle.js\r\n     return  _.shuffle(temp)\r\n    \r\n    // shuffle the data array\r\n    // personally I would use this function. DO NOT REINVENT THE WHEEL HERE. \r\n\t  // Just make sure you leave this\r\n    // link in so we know you grabbed it from somewhere\r\n    // https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\r\n  };\r\n\r\n  handleItemClick = (event) => {\r\n    // you'll want to set up a utility variable called isFirstClick and set it to false\r\n    let firstClick = false\r\n    // You'll create a copy of your state data by mapping through this.state.data\r\n    // for each item create a copy of the object then check to see if that objects id is equal to the\r\n    // id that was passed into the handleClick function. If the ids match, you should check to see if the\r\n    // objects clicked property is false. If it's false then set it to true and also set isFirstClick to true.\r\n    // Remember that you have to return from the map function to have it save into your copy of the data object\r\n   let id = event.target.id\r\n  //  console.log(id)\r\n  //  console.log(this.state.data[id])\r\n  // console.log(typeof id) // returns string\r\n  let upDateData = this.state.data.map(element => {\r\n    //console.log(typeof element.id) // retursn number\r\n\r\n        if (element.id === parseInt(id)) {\r\n\r\n          if(element.isClicked === false){\r\n            // User got a point\r\n            firstClick = true\r\n          }\r\n          \r\n          if(firstClick){\r\n            // update score\r\n            let newScore= this.state.score + 1\r\n            let newTopScore= Math.max(newScore, this.state.topScore)\r\n            this.setState({score: newScore, topScore: newTopScore })\r\n            \r\n\r\n            return {...element, isClicked: true}\r\n          }\r\n          else{\r\n            //gameover\r\n            this.resetGame()\r\n          }\r\n\r\n        }\r\n\r\n        return {...element}\r\n\r\n\r\n    // if (element.id === parseInt(id) && element.isClicked === false) {\r\n    //   console.log(element.name)\r\n    //   // increment score & topscore\r\n    //   // Math.max\r\n    //   return {...element, isClicked: true}\r\n    //   // Using spread operator same as return below. \r\n    //   // return {\r\n    //   //   \"id\": element.id,\r\n    //   //   \"name\": element.name,\r\n    //   //   \"image\": element.image,\r\n    //   //   \"isClicked\": true\r\n    //   // }\r\n    // } // end of if\r\n    // else if (element.id === parseInt(id) && element.isClicked === true) {\r\n    //   // gameover\r\n    //   this.resetGame(this.state.data)\r\n    // } else {\r\n    //   return {...element}\r\n    // }\r\n }) // end of map\r\n\r\n  this.setState({data: upDateData})\r\n  // console.log(this.state.data)\r\n    // Now we If the image has never been clicked, so\r\n    // * If isFirstClick === true then\r\n    // you want to increment the score and you want to set top score equal to whichever is greater score or current top score\r\n    // to do this check out this Math method: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\r\n\r\n    // * If isFirstClick === false then\r\n    // we wantmto call the resetGame function\r\n  \r\n\r\n  };\r\n  // Only method needed to be defined is React.Component subclass render()\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Navbar>\r\n          <div className='title'>\r\n          Navbar\r\n          <br/>\r\n          topScore= {this.state.topScore}\r\n          <br/>\r\n          score= {this.state.score}\r\n          </div>\r\n        </Navbar>\r\n        <Header>\r\n          <div className='title'>Header</div>\r\n        </Header>\r\n        <Container>\r\n          {/* maps through each image */}\r\n          {this.shuffle(this.state.data)}\r\n        </Container>\r\n           <Footer>\r\n           <h2 className=\"footer\">2019</h2>\r\n           </Footer>\r\n      </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}